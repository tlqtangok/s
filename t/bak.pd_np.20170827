pandas plot scatter
# see_c_f(df,"ix")
df = df.reset_index()
df = df.head(4)
df = df.reset_index()
plt.xticks(np.linspace(0,5,6),np.array(df.dt),rotation=-30)
plt.yticks(np.linspace(0,1000000,9),np.linspace(0,1000000,9),rotation=30)
plt.plot(df.vo)
plt.show()
# plt.xticks?

# -----> 1
  |
  |
  0
df = df.drop(['tm','dt'],1) # del cols  

x = np.arange(9)
df = pd.DataFrame({
    'f0': x,
    'f1':x*3 -7,
    'f2':7/(x*1.0+1.0)
    
})

df.plot.bar(y=["f2","f0","f1"])
plt.show()
df.plot.scatter(x=["f0","f0"], y=["f2","f1"])
plt.show()

df["idx"] = np.arange(len(df))
df.plot.bar( x=["idx"],y=["f1","f2","f0"])
plt.show()

df["idx"] = np.arange(len(df))
df.plot.bar( y=["f1","f2","f0"])
plt.show()

df = pd.DataFrame(
[
 [1 ,2 ,3],
 [11 ,22 ,33]
],
 index = [0,1],
 columns = ["f0","f1","f2"]
)

df = pd.DataFrame(
np.mat("1 2 3; \
       4 5 6"),
 columns = ["f0","f1","f2"]
)
df

df = pd.DataFrame(
np.mat("1 2 3; \
       4 5 6"),
 columns = ["f0","f1","f2"]
)
df_ = pd.DataFrame(
np.mat("1 2 33; \
       4 5 6"),
 columns = ["f0","f1","f2"]
)

pd.concat([df,df_])
df = pd.DataFrame(np.eye(3)).astype(np.int).rename(columns={0:"f0",1:"f1",2:"f2"})
df = pd.DataFrame(
np.mat("1 2 3; \
       4 5 6"),
 columns = ["f0","f1","f2"]
)
df_ = pd.DataFrame(
np.mat("1 2 33; \
       4 5 6"),
 columns = ["f0_","f1_","f2_"]
)

pd.concat([df,df_], axis = 1)

# => 0 2
     1 4
df = df.melt()  

df = df.rename(columns={'f0':'f00'})
df

df = df.query('f1 == 2')
df

df = df.sort_index(ascending=0)
df = df.reset_index()
df.drop(["index"],1)
df.drop([0] )  #drop one line 

df.filter(regex='f[1-2]')
df[["f0","f1"]]
df.loc[:1,"f0":"f2"]  # included !!! , different with np
df.loc[ df["f0"]>1 , :]  # can only use "f0"
df.loc[ df["f0"]>1 , ["f1","f0"]]
df.iloc[:1,0:2]  #not include, can not use "f0" , only number

df.drop_duplicates() # unique
df.sample(frac=0.5)  # randomly get half of item 
df.sample(n=2)
df.nlargest(2,'f0')
df.f0.value_counts()  # get a hash that indicate the number of each element 

df.nunique() 	# return the unique num of each field 

- qcut -
print df
ds = np.arange(8)
np.random.shuffle(ds)
print ds
df = pd.qcut(ds, 5, labels=["C-","C+","B", "A-", "A+"])
print df 
list(df) 

df.max(axis=1)
df.clip(lower=2, upper=3,axis=0 ) #trim to board is not in the range 

t = df.groupby(by="f0")
df.groupby("f0").size()

for i in t:
    print i[0]
    print i[1].values

-shift
df.shift(1,axis=1)

-merge 
df0 =  pd.DataFrame (np.mat( "1 2 ; 3 4"), columns=["f0","f1"])
df1 =  pd.DataFrame (np.mat( "1 2 ; 33 44"), columns=["f0","f1"])
pd.merge( df0,df1, how='outer')

-applymap
f = lambda x: str(x) * 3
df["f0_"] = df.applymap(f).f0
df["f0_"] = pd.DataFrame(df.f0).applymap(f)
pd.DataFrame(df.dt).applymap(lambda x : parse(x).weekday()+1)
df

df = pd.DataFrame({
    "dt" : ["20120901","20130909" ],
    "val":[1 ,2],
    "vo":[4,6]
})
df.pivot(index="dt", columns="val", values="vo")

val 		1 	2
dt 		
20120901 	4.0 	NaN
20130909 	NaN 	6.0

-numpy resize
id_m = np.mat("1 3").astype(int)
id_m.resize(3,3)
id_m

id_m = np.mat("1 2 4")
np.r_[id_m,id_m]
np.c_[id_m,id_m]



